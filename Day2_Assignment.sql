/*
 * Questions
 * 1. JOIN, because JOIN usually has better performance than subqueries.
 * 2. CTE is comman table expression, it is a temporary named result-set used to dimplify complex joins and subqueries.
 * 3. The table variable is a special type of the local variable that helps to store data temporarily.
 * 4. The TRUNCATE command is used to delete all the rows from the table and free the space containing the table; The DELETE command deletes only the rows from the table based on the condition given in the where clause or deletes all the rows from the table if no condition is specified. But it does not free the space containing the table.
 * 5. An identity column is a column in a database table that is made up of values generated by the database. TRANCATE resets the identity value to the original seed value of the table, but DELETE doesn't.
 * 6. The two statement both can delete all the rows from the table but TRUNCATE also free the space of the table, however DELETE does not.
 */

--Scenarios
--1.
SELECT DISTINCT City
FROM Employees
WHERE City IN (SELECT City FROM Customers WHERE City IS NOT NULL)

--2.
--a.
SELECT DISTINCT City
FROM Customers
WHERE City NOT IN (SELECT City FROM Employees)
ORDER BY City

--b.
SELECT DISTINCT c.City
FROM Customers c LEFT JOIN Employees e ON c.City != e.City

--3.
SELECT p.ProductName, SUM(od.Quantity)
FROM Products p JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductName

--4.
SELECT c.City, SUM(dt.Quantity) AS TotalProducts
FROM Customers c
JOIN (SELECT o.CustomerID, od.Quantity FROM Orders o JOIN [Order Details] od ON o.OrderID = od.OrderID) dt
ON c.CustomerID = dt.CustomerID
GROUP BY c.City

--5.
--a.
SELECT City FROM Customers GROUP BY City HAVING COUNT(City) > 2
UNION
SELECT City FROM Customers GROUP BY City HAVING COUNT(City) = 2

--b.
SELECT DISTINCT City
FROM Customers
WHERE City IN (SELECT City FROM Customers GROUP BY City HAVING COUNT(City) >= 2)

--6.
SELECT DISTINCT c.City
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.City, od.ProductID
HAVING COUNT(od.ProductID) >= 2

--7.
SELECT ContactName
FROM Customers
WHERE ContactName IN(SELECT c.ContactName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.City != o.ShipCity)

--8.
SELECT TOP 5 dt.ProductID, dt.AVGPrice, dt.ShipCity, dt.RNK FROM [Order Details] od JOIN (
SELECT od.ProductID, o.ShipCity, AVG(od.UnitPrice) AS AVGPrice, RANK() OVER(PARTITION BY od.ProductID ORDER BY COUNT(od.Quantity) DESC) AS RNK
FROM Orders o JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY od.productID, o.ShipCity) dt 
ON od.ProductID = dt.ProductID
WHERE RNK <= 5

--9.
--a.
SELECT City
FROM Employees
WHERE City NOT IN (SELECT c.City FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID)

--b.
SELECT DISTINCT e.City
FROM Employees e LEFT JOIN Customers c ON e.City = c.City
WHERE c.City IS NULL

--10.
SELECT TOP 1 dt1.City
FROM (SELECT e.City FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.City ORDER BY COUNT(o.OrderID)) dt1
JOIN (SELECT o.ShipCity FROM Orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY COUNT(od.Quantity)) dt2
ON dt1.City = dt2.ShipCity

--11.
--DELETE ... WHERE GROUP BY column_name

--12.
SELECT e1.empid
FROM Employee e1 LEFT JOIN Employee e2 ON e1.mgrid = e2.empid
WHERE e2.empid IS NULL

--13.
SELECT dt.deptname
FROM (SELECT d.deptname, RANK() OVER(ORDER BY COUNT(e.deptid) DESC) RNK FROM Dept d JOIN Employee e ON d.depid = e.deptid GROUP BY d.deptname HAVING RANK() OVER(ORDER BY COUNT(e.deptid) DESC)) dt
WHERE dt.RNK = 1

--14.
SELECT dt.deptname, e1.empid, e1.salary FROM Employee e1 
JOIN (
	SELECT d.deptname, RANK() OVER(PARTITION BY d.deptname ORDER BY e2.salary DESC) RNK AS SalaryRNK
	FROM Employee e2 JOIN Dept d 
	ON e2.deptid = d.depid) dt
ON e1.deptname = dt.deptname
WHERE SalaryRNK <= 3